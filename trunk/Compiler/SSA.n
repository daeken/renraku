using Nextem.String;

namespace Renraku {
	public variant SSAArg {
		| Id {
			Num : int
		}
		| Phi {
			Num : int;
			Join : list [int]
		}
		| Arg {
			Num : uint
		}
		| VInt {
			Val : int
		}
		| VUInt {
			Val : uint
		}
		| VShort {
			Val : short
		}
		| VUShort {
			Val : ushort
		}
		
		public override ToString() : string {
			match(this) {
				| Id(num)        => "id({0})" <- num
				| Phi(num, join) => "phi({0}, {1})" <- (num, join)
				| Arg(num)       => "arg({0})" <- num
				| VInt(val)      => "{0}" <- val
				| VUInt(val)     => "{0}" <- val
				| VShort(val)    => "{0}" <- val
				| VUShort(val)   => "{0}" <- val
			}
		}
	}
	
	public type SSABody = list [int * Inst [SSAArg, int]];
	
	public module SSA {
		public FromCIL(cil : Assembly [CILBody]) : Assembly [SSABody] {
			def iterBody(body : CILBody, accum : SSABody = [], ssaId = 0, stack : list [int] = []) : SSABody {
				def convVal(val : CILArg) : SSAArg {
					| Arg(ind) => SSAArg.Arg(ind)
					| VInt(val) => SSAArg.VInt(val)
					| VUInt(val) => SSAArg.VUInt(val)
					| VShort(val) => SSAArg.VShort(val)
					| VUShort(val) => SSAArg.VUShort(val)
					| val => throw System.Exception("Can't convert {0}" <- val)
				}
				
				match(body) {
					| [] => accum.Reverse()
					| (offset, inst) :: tail =>
						def (elem, ssaId, stack) =
							match((inst, stack)) {
								| (Push(src), _) =>
									(Inst.Assign(SSAArg.Id(ssaId), convVal(src)), ssaId+1, ssaId :: stack)
								| (Unary(op, _, _), src :: stack) =>
									(Inst.Unary(op, SSAArg.Id(ssaId), SSAArg.Id(src)), ssaId+1, ssaId :: stack)
								| (Binary(op, ovf, _, _), right :: left :: stack) =>
									(Inst.Binary(op, ovf, SSAArg.Id(ssaId), (SSAArg.Id(left), SSAArg.Id(right))), ssaId+1, ssaId :: stack)
								| _ =>
									print inst;
									(null, ssaId, stack)
							}
						
						iterBody(tail, (offset, elem) :: accum, ssaId, stack)
				}
			}
			
			cil.MapMethods(x => iterBody(x))
		}
	}
}
